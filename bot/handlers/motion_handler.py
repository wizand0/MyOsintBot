import asyncio
import time
from telegram import Update
from telegram.ext import ContextTypes
from bot.config import ADMIN_ID, MOTION_COOLDOWN_SECONDS, MOTION_FRAME_SKIP, MOTION_MIN_AREA, RECONNECT_MAX_DELAY, \
    HEALTH_TIMEOUT
from bot.rtsp_motion_detector import run_rtsp_detector
import logging


logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è cooldown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
motion_notification_cooldown = {}


async def send_motion_alert_with_cooldown(bot, chat_id, photo_data, caption):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º cooldown"""
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    # if (chat_id in motion_notification_cooldown and
    #         current_time - motion_notification_cooldown[chat_id] < MOTION_COOLDOWN_SECONDS):
    #     logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ cooldown ({MOTION_COOLDOWN_SECONDS}s)")
    #     return False

    try:
        await bot.send_photo(chat_id=chat_id, photo=photo_data, caption=caption)
        motion_notification_cooldown[chat_id] = current_time
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å cooldown {MOTION_COOLDOWN_SECONDS}s")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


async def motion_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("motion_on handler called")
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        logging.info(f"User {user_id} attempted to use motion_on but is not admin")
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if context.bot_data.get('motion_enabled', False):
        logging.info("Motion detector already enabled")
        await update.message.reply_text("üìπ –î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return

    context.bot_data['motion_enabled'] = True

    if 'motion_task' not in context.bot_data:
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_motion_alert_with_cooldown –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä
        context.bot_data['motion_task'] = asyncio.create_task(
            run_rtsp_detector(
                context.bot,
                lambda: context.bot_data.get('motion_enabled', False),
                send_motion_alert_with_cooldown
            )
        )
        logging.info("Motion detector task started with optimizations for multiple cameras")

    await update.message.reply_text(
        f"‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –≤–∫–ª—é—á—ë–Ω\n"
        f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ {MOTION_FRAME_SKIP}-–≥–æ –∫–∞–¥—Ä–∞\n"
        f"‚è∞ Cooldown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {MOTION_COOLDOWN_SECONDS}s\n"
        f"üìπ –ö–∞–º–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
    )


async def motion_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("motion_off handler called")
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        logging.info(f"User {user_id} attempted to use motion_off but is not admin")
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not context.bot_data.get('motion_enabled', False):
        logging.info("Motion detector already disabled")
        await update.message.reply_text("‚èπ –î–µ—Ç–µ–∫—Ç–æ—Ä –∏ —Ç–∞–∫ –≤—ã–∫–ª—é—á–µ–Ω")
        return

    context.bot_data['motion_enabled'] = False

    if 'motion_task' in context.bot_data:
        context.bot_data['motion_task'].cancel()
        try:
            await context.bot_data['motion_task']
        except asyncio.CancelledError:
            logging.info("Motion detector task cancelled")
        del context.bot_data['motion_task']

    # –û—á–∏—â–∞–µ–º cooldown –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
    global motion_notification_cooldown
    motion_notification_cooldown.clear()

    await update.message.reply_text("‚èπ –î–µ—Ç–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω")


async def motion_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –¥–≤–∏–∂–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    enabled = context.bot_data.get('motion_enabled', False)
    status = "üü¢ –í–∫–ª—é—á—ë–Ω" if enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä
    from bot.rtsp_motion_detector import active_camera_tasks
    active_cameras = len([task for task in active_camera_tasks if not task.done()])

    # await update.message.reply_text(
    #     f"üìä –°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {status}\n"
    #     f"üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä: {active_cameras}\n"
    #     f"üîß –ê–Ω–∞–ª–∏–∑ –∫–∞–¥—Ä–æ–≤: –∫–∞–∂–¥—ã–π {MOTION_FRAME_SKIP}-–π\n"
    #     f"‚è∞ Cooldown: {MOTION_COOLDOWN_SECONDS}s\n"
    #     f"üìè –ú–∏–Ω. –ø–ª–æ—â–∞–¥—å: {MOTION_MIN_AREA}px"
    # )

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {status}\n"
        f"üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä: {active_cameras}\n"
        f"üîß –ê–Ω–∞–ª–∏–∑ –∫–∞–¥—Ä–æ–≤: –∫–∞–∂–¥—ã–π {MOTION_FRAME_SKIP}-–π\n"
        f"‚è∞ Cooldown: {MOTION_COOLDOWN_SECONDS}s\n"
        f"üìè –ú–∏–Ω. –ø–ª–æ—â–∞–¥—å: {MOTION_MIN_AREA}px\n"
        f"üîÑ Reconnect max delay: {RECONNECT_MAX_DELAY}s\n"  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
        f"üõ°Ô∏è Health timeout: {HEALTH_TIMEOUT}s"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
def is_motion_enabled(context: ContextTypes.DEFAULT_TYPE) -> bool:
    return context.bot_data.get('motion_enabled', False)


async def show_container_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
        log_lines = []
        try:
            with open('motion_debug.log', 'r', encoding='utf-8') as f:
                lines = f.readlines()
                log_lines = lines[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
        except FileNotFoundError:
            log_lines = ["–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"]

        log_text = "".join(log_lines)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –ª–æ–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram
        if len(log_text) > 4000:
            log_text = log_text[-4000:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤

        await update.message.reply_text(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n```\n{log_text}\n```",
                                        parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")