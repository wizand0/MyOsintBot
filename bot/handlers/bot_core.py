from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from bot.auth import is_admin, is_authorized
from bot.data import pending_requests
from bot.language_texts import texts
from bot.utils import notify_admin


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    if 'language' not in context.user_data:
        keyboard = [
            [
                InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='ru'),
                InlineKeyboardButton("English", callback_data='en')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.effective_message.reply_text(texts['ru']['select_language'], reply_markup=reply_markup)
        return

    user_lang = context.user_data['language']
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    if not (is_admin(user_id) or is_authorized(user_id)):
        if user_id not in pending_requests:
            pending_requests.add(user_id)
            await notify_admin(context, user_id)
        await update.effective_message.reply_text(texts[user_lang]['request_received'])
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reply_markup = build_menu_keyboard(user_lang, user_id)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_admin(user_id):
        welcome_text = texts[user_lang]['admin_welcome']
    else:
        welcome_text = texts[user_lang]['user_welcome']

    await update.effective_message.reply_text(welcome_text, reply_markup=reply_markup)


def build_menu_keyboard(user_lang: str, user_id: int) -> ReplyKeyboardMarkup:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(user_id):
        menu_buttons = [
            [
                KeyboardButton(text=texts[user_lang]['main']),
                KeyboardButton(text=texts[user_lang]['instruction_cmd'])
            ],
            [
                KeyboardButton(text=texts[user_lang]['common_search']),
                KeyboardButton(text=texts[user_lang]['search_phone'])
            ],
            [
                KeyboardButton(text=texts[user_lang]['new_requests']),
                KeyboardButton(text=texts[user_lang]['user_count'])
            ],
            [
                KeyboardButton(text=texts[user_lang].get('db_stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î')),
                KeyboardButton(text=texts[user_lang].get('server_stats', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'))
            ],
            [
                KeyboardButton(text="Motion ON"),
                KeyboardButton(text="Motion OFF")
            ],
            [
                KeyboardButton(text="üìä Motion Status"),
                KeyboardButton(text="üìã Container Logs")
            ]
        ]
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif is_authorized(user_id):
        menu_buttons = [
            [
                KeyboardButton(text=texts[user_lang]['instruction_cmd']),
                KeyboardButton(text=texts[user_lang]['main'])
            ],
            [
                KeyboardButton(text=texts[user_lang]['common_search']),
                KeyboardButton(text=texts[user_lang]['search_phone'])
            ],
        ]
    else:
        # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
        menu_buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    menu_buttons.append([
        KeyboardButton(text=texts[user_lang]['change_language'])
    ])

    # –û–ø—Ü–∏—è resize_keyboard=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –æ–∫–Ω–æ —á–∞—Ç–∞.
    return ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)


# async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     query = update.callback_query
#     await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∫–ª–∏–µ–Ω—Ç–µ Telegram
#
#     command = query.data  # –î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ callback_data
#
#     # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru'
#     lang = context.user_data.get('language', 'ru')
#     user_id = query.from_user.id
#
#     # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥:
#     if command == 'new_requests' and is_admin(user_id):
#         await show_pending_requests(update, context)
#     elif command == 'user_count' and is_admin(user_id):
#         await show_users_count(update, context)
#     elif command == 'common_search':
#         context.user_data['search_mode'] = 'general'
#         await query.edit_message_text(texts[lang]['general_search_query'])
#     elif command == 'search_phone':
#         context.user_data['search_mode'] = 'phone'
#         await query.edit_message_text(texts[lang]['phone_search_query'])
#     elif command == 'instruction_cmd':
#         await query.edit_message_text(texts[lang]['instruction_text'])
#
#
#     elif command == 'change_language':
#         # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
#         keyboard = [
#             [
#                 InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='ru'),
#                 InlineKeyboardButton("English", callback_data='en')
#             ]
#         ]
#         reply_markup = InlineKeyboardMarkup(keyboard)
#         await query.edit_message_text(texts[lang]['select_language'], reply_markup=reply_markup)
#     else:
#         # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
#         await query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")



