# main.py

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters, CallbackQueryHandler,
)
import re  # –î–æ–±–∞–≤—å—Ç–µ –¥–ª—è flags –≤ Regex

from bot.db import init_db_pool, close_db_pool
from bot.handlers.bot_core import start
from .handlers.common_handlers import callback_handler, register_common_handlers
from .handlers.admin_handlers import approve_user, delete_user, stats_handler
from .handlers.language_handlers import language_selection_handler, change_language_handler
from .handlers.user_handlers import message_handler
from .config import TOKEN
from .utils import notify_startup, notify_startup_try_if_no_internet
from bot.handlers.common_handlers import on_motion_on_text, on_motion_off_text
from bot.handlers.motion_handler import motion_on, motion_off, motion_status, show_container_logs


# from .handlers import start, message_handler, approve_user, language_selection_handler, change_language_handler, \
#     callback_handler

async def on_startup_callback(context):
    # Telegram‚Äë–±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ context.bot
    await notify_startup_try_if_no_internet(context.bot)
    # await notify_startup(context.bot)

stats_cmd = CommandHandler("stats", stats_handler)


async def on_startup(app):
    # —Å–æ–∑–¥–∞—ë–º –ø—É–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data
    app.bot_data["db_pool"] = await init_db_pool()
    await notify_startup_try_if_no_internet(app.bot)

async def on_shutdown(app):
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    pool = app.bot_data.get("db_pool")
    if pool:
        await close_db_pool(pool)


def main():
    application = (ApplicationBuilder()
                   .token(TOKEN)
                   # v20+: post_init –∏ post_shutdown
                   .post_init(on_startup)
                   .post_shutdown(on_shutdown)
                   .build())

    register_common_handlers(application)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /approve 123456789 (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    application.add_handler(CommandHandler("approve", approve_user))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /delete 123456789 (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    application.add_handler(CommandHandler("delete", delete_user))

    # –î–û–ë–ê–í–¨–¢–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò MOTION –ü–ï–†–ï–î –û–ë–©–ò–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–ú –¢–ï–ö–°–¢–ê
    # application.add_handler(MessageHandler(filters.TEXT & filters.Regex(re.compile("^Motion ON$", re.IGNORECASE)),
    #                                        motion_on))
    # application.add_handler(MessageHandler(filters.TEXT & filters.Regex(re.compile("^Motion OFF$", re.IGNORECASE)),
    #                                        motion_off))

    # –≤–º–µ—Å—Ç–æ filters.Regex(...)
    # application.add_handler(MessageHandler(filters.TEXT & filters.Text(["Motion ON", "motion on"]), motion_on))
    # application.add_handler(MessageHandler(filters.TEXT & filters.Text(["Motion OFF", "motion off"]), motion_off))

    # MOTION HANDLERS - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ motion-related –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & filters.Text(["Motion ON", "motion on"]), motion_on))
    application.add_handler(MessageHandler(filters.TEXT & filters.Text(["Motion OFF", "motion off"]), motion_off))
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Text(["üìä Motion Status", "motion status", "Motion Status"]),
                       motion_status))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    application.add_handler(CommandHandler("motion_status", motion_status))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ CallbackQuery –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ('ru' –∏–ª–∏ 'en')
    application.add_handler(CallbackQueryHandler(language_selection_handler, pattern="^(ru|en)$"))
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ (callback_data = "change_language")
    application.add_handler(CallbackQueryHandler(change_language_handler, pattern="^change_language$"))
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback query
    application.add_handler(CallbackQueryHandler(callback_handler))

    application.add_handler(stats_cmd)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Text(["üìã Container Logs", "container logs", "Container Logs"]),
                       show_container_logs)
    )

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π job –Ω–∞ 5‚Äë–π —Å–µ–∫—É–Ω–¥–µ
    application.job_queue.run_once(on_startup_callback, when=5)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
