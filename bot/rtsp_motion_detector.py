import cv2
import csv
import os
import time
import json
import logging
import io
import shutil
import asyncio
from concurrent.futures import ThreadPoolExecutor
from ultralytics import YOLO
from bot.config import (
    ADMIN_ID, MOTION_FRAME_SKIP, MOTION_COOLDOWN_SECONDS,
    MOTION_RESIZE_WIDTH, MOTION_RESIZE_HEIGHT, MOTION_SENSITIVITY,
    MOTION_MIN_AREA, MOTION_RECOGNITION_DELAY_SEC, YOLO_CONF_THRESHOLD,
    YOLO_TARGET_CLASSES, MOTION_SAVE_FRAMES,
    RECONNECT_INITIAL_DELAY, RECONNECT_MAX_DELAY, HEALTH_TIMEOUT, DAYS_TO_KEEP_FILES
)
import glob
from datetime import datetime, timedelta


# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
OUTPUT_FILE = "rtsp_motions_log.csv"
FRAMES_DIR = "rtsp_motion_frames"
YOLO_MODEL = "yolov8n.pt"

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[logging.StreamHandler()]
)

file_handler = logging.FileHandler("motion_debug.log", encoding="utf-8")
file_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))

logger = logging.getLogger()
logger.addHandler(file_handler)

os.makedirs(FRAMES_DIR, exist_ok=True)

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
frame_executor = ThreadPoolExecutor(max_workers=2, thread_name_prefix="motion_detector")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∫–∞–º–µ—Ä
active_camera_tasks = []


# ===================== –£—Ç–∏–ª–∏—Ç—ã =====================
def now_ts():
    return time.strftime("%Y-%m-%d %H:%M:%S")


def cleanup_old_frames(days_to_keep=7):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    try:
        current_time = time.time()
        for frame_file in glob.glob(os.path.join(FRAMES_DIR, "**", "*.jpg"), recursive=True):
            file_time = os.path.getctime(frame_file)
            if current_time - file_time > days_to_keep * 86400:  # days to seconds
                os.remove(frame_file)
                logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {frame_file}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def date_dir():
    d = time.strftime("%Y%m%d")
    p = os.path.join(FRAMES_DIR, d)
    logging.info(f"üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {p}")
    logging.info(f"üìÇ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(FRAMES_DIR)}")
    logging.info(
        f"üìÇ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É: {os.access(FRAMES_DIR, os.W_OK) if os.path.exists(FRAMES_DIR) else 'N/A'}")

    os.makedirs(p, exist_ok=True)
    logging.info(f"üìÇ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(p)}")
    logging.info(f"üìÇ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –ø–∞–ø–∫—É: {os.access(p, os.W_OK) if os.path.exists(p) else 'N/A'}")

    return p


# ===================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π =====================
def check_dependencies(bot=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ OpenCV"""
    errors = []
    if shutil.which("ffmpeg") is None:
        errors.append("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")

    build_info = cv2.getBuildInformation()
    if "FFMPEG" not in build_info:
        errors.append("‚ùå OpenCV —Å–æ–±—Ä–∞–Ω –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ffmpeg")

    if errors:
        for e in errors:
            logging.error(e)
        if bot:
            for e in errors:
                try:
                    asyncio.create_task(bot.send_message(chat_id=ADMIN_ID, text=e))
                except Exception:
                    pass
    else:
        logging.info("‚úÖ ffmpeg –∏ OpenCV –≤ –ø–æ—Ä—è–¥–∫–µ")


# ===================== YOLO =====================
logging.info("üì¶ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å YOLOv8...")
model = YOLO(YOLO_MODEL)

if not os.path.exists(OUTPUT_FILE):
    with open(OUTPUT_FILE, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(["camera", "timestamp", "class", "confidence"])


# ===================== –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è =====================
def detect_motion_optimized(frame1, frame2):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –∫–∞–¥—Ä–∞"""
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞–¥—Ä—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    small1 = cv2.resize(frame1, (MOTION_RESIZE_WIDTH, MOTION_RESIZE_HEIGHT))
    small2 = cv2.resize(frame2, (MOTION_RESIZE_WIDTH, MOTION_RESIZE_HEIGHT))

    # –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    diff = cv2.absdiff(small1, small2)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    _, thresh = cv2.threshold(blur, MOTION_SENSITIVITY, 255, cv2.THRESH_BINARY)
    dilated = cv2.dilate(thresh, None, iterations=3)
    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
    scale_factor = (frame1.shape[1] / MOTION_RESIZE_WIDTH) * (frame1.shape[0] / MOTION_RESIZE_HEIGHT)
    adjusted_min_area = MOTION_MIN_AREA / scale_factor

    return any(cv2.contourArea(c) >= adjusted_min_area for c in contours)


async def process_yolo_async(frame):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ YOLO"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(frame_executor, lambda: model(frame, verbose=False)[0])


class MotionDetector:
    def __init__(self, camera_name):
        self.camera_name = camera_name
        self.frame_counter = 0
        self.last_trigger_time = 0.0
        self.last_motion_notification = 0.0

    def should_process_frame(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä"""
        self.frame_counter += 1
        return self.frame_counter % MOTION_FRAME_SKIP == 0

    def can_send_notification(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        current_time = time.time()
        return (current_time - self.last_motion_notification) >= MOTION_COOLDOWN_SECONDS

    def update_notification_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.last_motion_notification = time.time()


# ===================== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====================
async def run_rtsp_detector(bot, enabled_flag: callable, send_alert_func=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–∞–º–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    check_dependencies(bot)

    cleanup_old_frames(days_to_keep=DAYS_TO_KEEP_FILES)

    logging.info(f"üîß MOTION_SAVE_FRAMES = {MOTION_SAVE_FRAMES}")
    logging.info(f"üîß FRAMES_DIR = {FRAMES_DIR}")
    logging.info(f"üîß –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(FRAMES_DIR)}")
    logging.info(f"üîß –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –ø–∞–ø–∫—É: {os.access(FRAMES_DIR, os.W_OK) if os.path.exists(FRAMES_DIR) else 'N/A'}")

    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try:
        test_file = os.path.join(FRAMES_DIR, "test_write.txt")
        with open(test_file, "w") as f:
            f.write("test")
        logging.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_file}")
        if os.path.exists(test_file):
            os.remove(test_file)
            logging.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

    import pathlib
    camera_file = pathlib.Path(__file__).parent / "cameras.json"
    logging.info(f"camera_file: {camera_file}")

    with open(camera_file, "r", encoding="utf-8") as c:
        cameras = json.load(c)
    if not cameras:
        logging.error("‚ùå cameras.json –ø—É—Å—Ç–æ–π.")
        return

    logging.info(f"cameras: {cameras}")
    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(cameras)} –∫–∞–º–µ—Ä. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...")
    logging.info(f"‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ {MOTION_FRAME_SKIP}-–≥–æ –∫–∞–¥—Ä–∞, "
                 f"cooldown {MOTION_COOLDOWN_SECONDS}s, —Ä–∞–∑–º–µ—Ä {MOTION_RESIZE_WIDTH}x{MOTION_RESIZE_HEIGHT}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    global active_camera_tasks
    active_camera_tasks = []

    try:
        for name, url in cameras.items():
            task = asyncio.create_task(
                detect_motion_and_objects_optimized(bot, name, url, enabled_flag, send_alert_func),
                name=f"camera_{name}"
            )
            active_camera_tasks.append(task)
            logging.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–º–µ—Ä—ã {name}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–∏–ª–∏ –∏—Ö –æ—Ç–º–µ–Ω—ã)
        await asyncio.gather(*active_camera_tasks, return_exceptions=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ run_rtsp_detector: {e}")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        for task in active_camera_tasks:
            if not task.done():
                task.cancel()
        active_camera_tasks.clear()
        logging.info("üîö –í—Å–µ –∫–∞–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def detect_motion_and_objects_optimized(bot, camera_name, rtsp_url, enabled_flag, send_alert_func=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å reconnect"""
    logging.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {camera_name} ({rtsp_url})...")

    retry_delay = RECONNECT_INITIAL_DELAY  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ retry
    last_frame_time = time.time()  # –î–ª—è health check

    while enabled_flag():  # –í–Ω–µ—à–Ω–∏–π loop –¥–ª—è retry
        cap = cv2.VideoCapture(rtsp_url, cv2.CAP_FFMPEG)

        if not cap.isOpened():
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {camera_name}. Retry —á–µ—Ä–µ–∑ {retry_delay}s...")
            await asyncio.sleep(retry_delay)
            retry_delay = min(retry_delay * 2, RECONNECT_MAX_DELAY)  # Exponential backoff
            continue

        logging.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {camera_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        retry_delay = RECONNECT_INITIAL_DELAY  # –°–±—Ä–æ—Å delay –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

        ret, frame1 = cap.read()
        ret2, frame2 = cap.read()
        if not ret or not ret2:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã {camera_name}")
            cap.release()
            continue

        detector = MotionDetector(camera_name)
        last_frame_time = time.time()

        try:
            while enabled_flag() and cap.isOpened():
                if not cap.grab():
                    logging.warning(f"‚ö†Ô∏è grab() –≤–µ—Ä–Ω—É–ª False –¥–ª—è {camera_name}")
                    break

                ok, frame2 = cap.retrieve()
                if not ok:
                    logging.warning(f"‚ö†Ô∏è retrieve() –≤–µ—Ä–Ω—É–ª False –¥–ª—è {camera_name}")
                    break

                if frame2 is None or frame2.size == 0:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞–¥—Ä –¥–ª—è {camera_name}")
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º timestamp —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
                last_frame_time = time.time()

                # Health check: –µ—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è > HEALTH_TIMEOUT, break –¥–ª—è reconnect
                if time.time() - last_frame_time > HEALTH_TIMEOUT:
                    logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤ >{HEALTH_TIMEOUT}s –¥–ª—è {camera_name}. Reconnect...")
                    break

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                if not detector.should_process_frame():
                    frame1 = frame2
                    continue

                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                motion_detected = detect_motion_optimized(frame1, frame2)

                if motion_detected and detector.can_send_notification():
                    logging.info(f"üö® –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {camera_name}")

                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ YOLO
                    try:
                        results = await process_yolo_async(frame2)
                        object_detected = False

                        # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                        if results.boxes:
                            logging.info(f"YOLO –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(results.boxes)} –æ–±—ä–µ–∫—Ç–æ–≤")
                            for box in results.boxes:
                                cls_id = int(box.cls[0])
                                class_name = results.names[cls_id]
                                conf = float(box.conf[0])
                                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç: {class_name} ({conf:.2f})")

                        else:
                            logging.info(f"YOLO –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–≤–∏–∂–µ–Ω–∏–µ")

                        for box in results.boxes:
                            cls_id = int(box.cls[0])
                            class_name = results.names[cls_id]
                            conf = float(box.conf[0])

                            if class_name in YOLO_TARGET_CLASSES and conf >= YOLO_CONF_THRESHOLD:
                                current_time = time.time()
                                if (current_time - detector.last_trigger_time) >= MOTION_RECOGNITION_DELAY_SEC:
                                    ts = now_ts()
                                    logging.info(f"‚úÖ {camera_name}: {class_name} ({conf:.2f}), {ts}")

                                    _, buf = cv2.imencode(".jpg", frame2)
                                    image_bytes = io.BytesIO(buf)

                                    caption = f"{camera_name}: {class_name} ({conf:.2f}) {ts}"

                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å cooldown –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                                    if send_alert_func:
                                        await send_alert_func(bot, ADMIN_ID, image_bytes, caption)
                                    else:
                                        await bot.send_photo(chat_id=ADMIN_ID, photo=image_bytes, caption=caption)

                                    # if MOTION_SAVE_FRAMES:
                                    #     fname = f"{camera_name}_{ts.replace(':', '-')}_{class_name}.jpg"
                                    #     cv2.imwrite(os.path.join(date_dir(), fname), frame2)

                                    if MOTION_SAVE_FRAMES:
                                        fname = f"{camera_name}_{ts.replace(':', '-')}_{class_name}.jpg"
                                        save_dir = date_dir()
                                        save_path = os.path.join(save_dir, fname)

                                        logging.info(f"üñºÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–∞:")
                                        logging.info(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {save_dir}")
                                        logging.info(f"   üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(save_dir)}")
                                        logging.info(
                                            f"   üìÅ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å: {os.access(save_dir, os.W_OK) if os.path.exists(save_dir) else 'N/A'}")
                                        logging.info(f"   üìÑ –§–∞–π–ª: {fname}")

                                        try:
                                            success = cv2.imwrite(save_path, frame2)
                                            if success:
                                                logging.info(f"‚úÖ –ö–∞–¥—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
                                                # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                                                if os.path.exists(save_path):
                                                    file_size = os.path.getsize(save_path)
                                                    logging.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} bytes")
                                                else:
                                                    logging.error("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ cv2.imwrite!")
                                            else:
                                                logging.error("‚ùå cv2.imwrite –≤–µ—Ä–Ω—É–ª False - –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

                                        except Exception as e:
                                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–¥—Ä–∞: {e}")
                                            import traceback
                                            logging.error(traceback.format_exc())

                                    with open(OUTPUT_FILE, "a", newline="", encoding="utf-8") as a:
                                        csv.writer(a).writerow([camera_name, ts, class_name, f"{conf:.2f}"])

                                    detector.last_trigger_time = current_time
                                    detector.update_notification_time()
                                    object_detected = True
                                    break
                            else:
                                logging.info(
                                    f"YOLO –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {class_name} ({conf:.2f}), "
                                    f"–ø–æ—Ä–æ–≥ {YOLO_CONF_THRESHOLD}"
                                )

                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–±—ä–µ–∫—Ç—ã, –Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –µ—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è cooldown
                        if not object_detected:
                            detector.update_notification_time()

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ YOLO –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {camera_name}: {e}")

                frame1 = frame2

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ
                await asyncio.sleep(0.05)

        except asyncio.CancelledError:
            logging.info(f"üõë –ó–∞–¥–∞—á–∞ –∫–∞–º–µ—Ä—ã {camera_name} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            raise
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {camera_name}: {e}")

        finally:
            cap.release()
            logging.info(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {camera_name} –∑–∞–∫—Ä—ã—Ç–æ. –ï—Å–ª–∏ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî retry.")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ–±—Ä—ã–≤–µ (—Å cooldown, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
            try:
                await bot.send_message(chat_id=ADMIN_ID,
                                       text=f"‚ö†Ô∏è –û–±—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {camera_name}. –ü—ã—Ç–∞—é—Å—å reconnect...")
            except Exception:
                pass

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ retry, –µ—Å–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∞
        if enabled_flag():
            await asyncio.sleep(retry_delay)
            retry_delay = min(retry_delay * 2, RECONNECT_MAX_DELAY)

    logging.info(f"üîö –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {camera_name} –∑–∞–≤–µ—Ä—à—ë–Ω")
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=f"‚èπ {camera_name}: –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception:
        pass